#ifndef _FUNCTIONS_H_
#define _FUNCTIONS_H_

#include <z64.h>

float fabsf(float f);
#pragma intrinsic(fabsf)
float sqrtf(float f);
#pragma intrinsic(sqrtf)

void cleararena(void);
void bootproc(void);
void Main_ThreadEntry(void* arg0);
void Idle_ThreadEntry(void* a0);
void ViConfig_UpdateVi(u32 arg0);
void ViConfig_UpdateBlack();
s32 DmaMgr_CompareName(const char* name1, const char* name2);
s32 DmaMgr_DMARomToRam(u32 rom, u32 ram, u32 size);
s32 DmaMgr_DmaCallback0(OSPiHandle* pihandle, OSIoMesg* mb, s32 direction);
void DmaMgr_DmaCallback1(u32 ram, u32 rom, u32 size);
void DmaMgr_Error(DmaRequest* req, const char* file, const char* errorName, const char* errorDesc);
const char* DmaMgr_GetFileNameImpl(u32 vrom);
const char* DmaMgr_GetFileName(u32 vrom);
void DmaMgr_ProcessMsg(DmaRequest* req);
void DmaMgr_ThreadEntry(void* arg0);
s32 DmaMgr_SendRequestImpl(DmaRequest* req, u32 ram, u32 vrom, u32 size, u32 unk, OSMesgQueue* queue, OSMesg msg);
s32 DmaMgr_SendRequest0(u32 ram, u32 vrom, u32 size);
void DmaMgr_Start();
s32 DmaMgr_SendRequest2(DmaRequest* req, u32 ram, u32 vrom, u32 size, u32 unk5, OSMesgQueue* queue, OSMesg msg,
                        const char* file, s32 line);
s32 DmaMgr_SendRequest1(void* ram0, u32 vrom, u32 size, const char* file, s32 line);
void* Yaz0_FirstDMA();
void* Yaz0_NextDMA(void* curSrcPos);
void Yaz0_DecompressImpl(Yaz0Header* hdr, u8* dst);
void Yaz0_Decompress(u32 romStart, void* dst, u32 size);
void Locale_Init();
void Locale_ResetRegion();
u32 func_80001F48();
u32 func_80001F8C();
u32 Locale_IsRegionNative();
void __assert(const char* exp, const char* file, s32 line);
void isPrintfInit();
void osSyncPrintfUnused(const char* fmt, ...);
void osSyncPrintf(const char* fmt, ...);
void rmonPrintf(const char* fmt, ...);
u32 is_proutSyncPrintf(void* arg0, const char* str, s32 count);
void func_80002384(const char* exp, const char* file, u32 line);
OSPiHandle* osDriveRomInit();
void Yaz0_Old_DecompressImpl(Yaz0Header* hdr, u8* dst);
void StackCheck_Init(StackEntry* entry, void* stackTop, void* stackBottom, u32 initValue, s32 minSpace,
                     const char* name);
void StackCheck_Cleanup(StackEntry* entry);
StackStatus StackCheck_GetState(StackEntry* entry);
u32 StackCheck_CheckAll();
u32 StackCheck_Check(StackEntry* entry);
float LogUtils_CheckFloatRange(const char* exp, s32 arg1, const char* var1Name, float var1, const char* var2Name,
                               float var2, const char* var3Name, float var3);
s32 LogUtils_CheckIntRange(const char* exp, s32 arg1, const char* var1Name, s32 var1, const char* var2Name, s32 var2,
                           const char* var3Name, s32 var3);
void LogUtils_LogHexDump(void* ptr, s32 size0);
void LogUtils_LogPointer(s32 value, u32 max, void* ptr, const char* name, const char* file, s32 line);
void LogUtils_CheckBoundary(const char* name, s32 value, s32 unk, const char* file, s32 line);
void LogUtils_CheckNullPointer(const char* exp, void* ptr, const char* file, s32 line);
void LogUtils_CheckValidPointer(const char* exp, void* ptr0, const char* file, s32 line);
void LogUtils_LogThreadId(const char* name, s32 line);
void LogUtils_HungupThread(const char* name, s32 line);
void LogUtils_ResetHungup();
char* proutSprintf(char* dst, const char* fmt, size_t size);
s32 vsprintf(char* dst, const char* fmt, va_list args);
s32 sprintf(char* dst, const char* fmt, ...);
void __osPiCreateAccessQueue(void);
void __osPiGetAccess(void);
void __osPiRelAccess(void);
s32 osSendMesg(OSMesgQueue* mq, OSMesg mesg, s32 flag);
void osStopThread(OSThread* thread);
void osViExtendVStart(u32 arg0);
s32 osRecvMesg(OSMesgQueue* mq, OSMesg* msg, s32 flag);
void __createSpeedParam(void);
void __osInitialize_common(void);
void __osInitialize_autodetect();
// ? __ull_rshift(?);
// ? __ull_rem(?);
// ? __ull_div(?);
// ? __ll_lshift(?);
// ? __ll_rem(?);
// ? __ll_div(?);
// ? __ll_mul(?);
// ? __ull_divremi(?);
// ? __ll_mod(?);
// ? __ll_rshift(?);
void __osExceptionPreamble();
// ? __osException(?);
void __osEnqueueAndYield(OSThread**);
void __osEnqueueThread(OSThread**, OSThread*);
OSThread* __osPopThread(OSThread**);
// ? __osNop(?);
void __osDispatchThread();
void __osCleanupThread(void);
void __osDequeueThread(OSThread** queue, OSThread* thread);
void osDestroyThread(OSThread* thread);
void bzero(void* __s, u32 __n);
void osCreateThread(OSThread* thread, OSId id, void (*entry)(void*), void* arg, void* sp, OSPri pri);
void __osSetSR(u32);
u32 __osGetSR();
void osWritebackDCache(void* vaddr, s32 nbytes);
void* osViGetNextFramebuffer();
void osCreatePiManager(OSPri pri, OSMesgQueue* cmdQ, OSMesg* cmdBuf, s32 cmdMsgCnt);
void __osDevMgrMain(void* arg);
s32 __osPiRawStartDma(s32 dir, u32 cart_addr, void* dram_addr, size_t size);
u32 osVirtualToPhysical(void* vaddr);
void osViBlack(u8 active);
s32 __osSiRawReadIo(void* a0, u32* a1);
OSId osGetThreadId(OSThread* thread);
OSIntMask osSetIntMask(OSIntMask);
void osViSetMode(OSViMode* mode);
u32 __osProbeTLB(void*);
u32 osGetMemSize(void);
void osSetEventMesg(OSEvent e, OSMesgQueue* mq, OSMesg msg);
s32 _Printf(char* (*pfn)(char*, const char*, size_t), char* arg, const char* fmt, va_list ap);
void osUnmapTLBAll(void);
s32 osEPiStartDma(OSPiHandle* handle, OSIoMesg* mb, s32 direction);
const u8* strchr(const u8* str, s32 ch);
size_t strlen(const u8* str);
void* memcpy(void* dst, const void* src, size_t size);
void osInvalICache(void* vaddr, s32 nbytes);
void osCreateMesgQueue(OSMesgQueue* mq, OSMesg* msg, s32 count);
void osInvalDCache(void* vaddr, s32 nbytes);
u32 __osSiDeviceBusy();
void osSetThreadPri(OSThread* thread, OSPri pri);
OSPri osGetThreadPri(OSThread* thread);
s32 __osEPiRawReadIo(OSPiHandle* handle, u32 devAddr, u32* data);
void osViSwapBuffer(void* vaddr);
s32 __osEPiRawStartDma(OSPiHandle* handle, s32 direction, u32 cartAddr, void* dramAddr, size_t size);
u32 bcmp(void* __sl, void* __s2, u32 __n);
OSTime osGetTime(void);
void __osTimerServicesInit();
void __osTimerInterrupt();
void __osSetTimerIntr(OSTime tim);
OSTime __osInsertTimer(OSTimer* a0);
u32 osGetCount(void);
void __osSetGlobalIntMask(u32 mask);
void __osSetCompare(u32);
void* bcopy(void* __src, void* __dest, u32 __n);
void __osResetGlobalIntMask(u32 mask);
s32 __osDisableInt(void);
void __osRestoreInt(s32);
void __osViInit();
void __osViSwapContext();
OSMesgQueue* osPiGetCmdQueue();
s32 osEPiReadIo(OSPiHandle* handle, u32 devAddr, u32* data);
void osViSetSpecialFeatures(u32 func);
OSPiHandle* osCartRomInit();
void __osSetFpcCsr(u32);
u32 __osGetFpcCsr();
s32 osEPiWriteIo(OSPiHandle* handle, u32 devAddr, u32 data);
void osMapTLBRdb(void);
u32 __osGetCause();
s32 __osEPiRawWriteIo(OSPiHandle* handle, u32 devAddr, u32 data);
void osCreateViManager(OSPri pri);
void viMgrMain(void* vargs);
OSViContext* __osViGetCurrentContext();
void osStartThread(OSThread* thread);
void osViSetYScale(float scale);
void osViSetXScale(f32 value);
void __osSetHWIntrRoutine(s32 idx, OSMesgQueue* queue, OSMesg msg);
void __osGetHWIntrRoutine(s32 idx, OSMesgQueue** outQueue, OSMesg* outMsg);
void __osSetWatchLo(u32);

// ? func_80009320(?);
// ? func_800093F0(?);
// ? func_8001D234(?);
// ? func_8001D310(?);
// ? func_8001D480(?);
// ? func_8001D5C8(?);
Actor* Item_DropCollectible(GlobalContext* globalCtx, Vec3f* spawnPos, s16 params);
Actor* Item_DropCollectible2(GlobalContext* globalCtx, Vec3f* spawnPos, s16 params);
void Item_DropCollectibleRandom(GlobalContext* globalCtx, Actor* fromActor, Vec3f* spawnPos, s16 params);

void func_8001EC44(Actor * actor, LightMapper * lightMapper, GlobalContext * globalCtx, u32 dlist, Color_RGBA8 * color);
void func_8001F7A0(GlobalContext * globalCtx, Vec3f * arg1, Vec3f * arg2, f32 * arg3);
void func_8001F83C(TargetContext * targetCtx, s32 actorType, GlobalContext * globalCtx);
void func_8001F904(TargetContext* targetCtx, Actor* actor, s32 actorType, GlobalContext* globalCtx);
void func_8001FA68(TargetContext* targetCtx, Actor* actor, GlobalContext* globalCtx);
void Math_Vec3f_Copy (Vec3f * dest, Vec3f * src);
void Matrix_MultVec3f(Vec3f* src, Vec3f* dst);
Actor * func_800259BC(GlobalContext * globalCtx, ActorContext * actorCtx, Actor * * actorPtr, Player * player);
void func_800646F0(u16 sfxId);
s32 Flags_GetSwitch(GlobalContext * globalCtx, s32 flag);
void Flags_SetSwitch(GlobalContext* globalCtx, s32 flag);
void Flags_UnsetSwitch(GlobalContext* globalCtx, s32 flag);
s32 Flags_GetUnknown(GlobalContext* globalCtx, s32 flag);
void Flags_SetUnknown(GlobalContext* globalCtx, s32 flag);
void Flags_UnsetUnknown(GlobalContext* globalCtx, s32 flag);
s32 Flags_GetTreasure(GlobalContext* globalCtx, s32 flag);
void Flags_SetTreasure(GlobalContext* globalCtx, s32 flag);
s32 Flags_GetClear(GlobalContext* globalCtx, s32 flag);
void Flags_SetClear(GlobalContext* globalCtx, s32 flag);
void Flags_UnsetClear(GlobalContext* globalCtx, s32 flag);
s32 Flags_GetTempClear(GlobalContext* globalCtx, s32 flag);
void Flags_SetTempClear(GlobalContext* globalCtx, s32 flag);
void Flags_UnsetTempClear(GlobalContext* globalCtx, s32 flag);
s32 Flags_GetCollectible(GlobalContext* globalCtx, s32 flag);
void Flags_SetCollectible(GlobalContext* globalCtx, s32 flag);
void func_80020760(GlobalContext* globalCtx, TitleCardContext* titleCtx);
void TitleCard_InitBossName(GlobalContext* globalCtx, TitleCardContext* titleCtx, u32 texture, s16 arg3, s16 arg4,
                            u8 arg5, u8 arg6);
void TitleCard_InitPlaceName(GlobalContext* globalCtx, TitleCardContext* titleCtx, u32 texture, s32 arg3, s32 arg4,
                             s32 arg5, s32 arg6, s32 arg7);
void TitleCard_Update(GlobalContext* globalCtx, TitleCardContext* titleCtx);
s32 func_80020E80(GlobalContext* globalCtx, TitleCardContext* titleCtx);
void Actor_Kill(Actor* actor);
void Actor_InitPosRot(Actor* actor);
void Actor_SetHeight(Actor* actor, f32 offset);
void func_80020F48(Actor* actor);
void func_80020F68(Actor* actor);
void Actor_SetScale(Actor* actor, f32 scale);
void Actor_SetObjectDependency(GlobalContext* globalCtx, Actor* actor);
void Actor_Init(Actor* actor, GlobalContext* globalCtx);
void Actor_Destroy(Actor* actor, GlobalContext* globalCtx);
void func_80021124(Actor* actor);
void func_800211A4(Actor* actor);
void Actor_MoveForward(Actor* actor);
void func_80021248(Actor* actor);
void func_800212B8(Actor* actor);
void func_800212E4(Actor* actor, f32 arg1);
void func_80021338(Actor* actor, UNK_PTR arg1);
s16 func_800213E0(Actor* actorA, Actor* actorB);
s16 func_8002140C(Actor* actor, Vec3f* arg1);
s16 func_80021430(Actor* actorA, Actor* actorB); 
s16 func_8002145C(Actor* actorA, Actor* actorB);
s16 func_80021488(Actor * actor, Vec3f * arg1);
f32 func_800214AC(Actor* actorA, Actor* actorB);
f32 func_800214D8(Actor* actor, Vec3f* arg1);
f32 func_800214FC(Actor* actorA, Actor* actorB);
f32 func_80021528(Actor* actor, Vec3f* arg1);
void func_8002154C(Actor* actor, Vec3f* result, Vec3f* arg2);
f32 Actor_HeightDiff(Actor* actorA, Actor* actorB);
f32 func_80021600(Player* player);
s32 func_800216E8(Player* player);
s32 func_800216F8(Player* player);
s32 func_8002172C(GlobalContext* globalCtx);
s32 func_80021768(GlobalContext* globalCtx);
s32 func_8002177C(GlobalContext* globalCtx);
void func_80021790(GlobalContext* globalCtx, Actor* actorA, Actor* actorB);
void func_80021800(GlobalContext* globalCtx, Player* player);
void func_80021858(GlobalContext* globalCtx, Player* player, Actor* actor);
s32 func_8002187C(Player* player);
void func_800218A8(GlobalContext* globalCtx, ActorContext* actorCtx);
u32 func_800218C8(GlobalContext* globalCtx, Actor* actor, u8 newAction);
s32 func_800218EC(GlobalContext* globalCtx, Actor* actor, u8 arg2);
void func_80021928(DynaPolyActor* dynaActor);
void func_80021940(DynaPolyActor* dynaActor, f32 arg1, s16 arg2);
s32 func_80021968(Actor* actor, s16 arg1, GlobalContext* globalCtx);
s32 func_800219C0(Actor* actorA, Actor* actorB, s16 arg2);
s32 func_80021A28(Actor* actor, s16 arg1);
s32 func_80021A74(Actor* actorA, Actor* actorB, s16 arg2);
s32 func_80021AD4(Actor* actor, f32 arg1, s16 arg2);
s32 func_80021B54(Actor* actorA, Actor* actorB, f32 arg2, s16 arg3);
s32 func_80021BE8(Actor* actor, f32 arg1, s32 arg2);
s32 func_80021C60(GlobalContext* globalCtx, Actor* actor, Vec3f* arg2, s32 arg3); 
Hilite* func_800223C8(Vec3f* object, Vec3f* eye, Vec3f* lightDir, GraphicsContext* gfxCtx);
Gfx * func_800221EC (Vec3f* object, Vec3f* eye, Vec3f* lightDir, GraphicsContext* gfxCtx, Gfx* gfx, Hilite** hilite);
Hilite* func_800223C8(Vec3f* object, Vec3f* eye, Vec3f* lightDir, GraphicsContext* gfxCtx);
void func_80022438(Actor* actor, GlobalContext* globalCtx, s32 flag);
PosRot* func_80022670(PosRot* arg0, Actor* actor);
PosRot* func_800226A4(PosRot* arg0, Actor* actor);
PosRot* func_800226D8(PosRot* arg0, Actor* actor);
u32 func_80022824(Actor* actor, f32 arg1);
s32 func_80022860(Actor* actor, Player* player, s32 flag);
f32 func_8002F520(GlobalContext* globalCtx, CollisionContext* colCtx, CollisionPoly** colPoly, u32* arg3, Actor* actor, Vec3f* vec);
s32 func_8002FFE4(CollisionContext* colCtx, Vec3f* arg1, Vec3f* arg2, Vec3f* arg3, f32 arg4, CollisionPoly** colPoly, u32* arg6, Actor* actor, f32 arg8);
s32 func_8003004C(CollisionContext* colCtx, Vec3f* arg1, Vec3f* arg2, Vec3f* arg3, f32 arg4, CollisionPoly** colPoly, u32* arg6, Actor* actor, f32 arg8);
s32 func_80030224(CollisionContext* colCtx, f32* arg1, Vec3f* arg2, f32 arg3, UNK_PTR arg4, u32* arg5, Actor* actor);
void func_80035110(CollisionContext* colCtx, Actor* actor, u32 floorPolySource);
void func_80035180(CollisionContext* colCtx, u32 floorPolySource, Actor* actor);
s32 func_800347FC(GlobalContext* globalCtx, CollisionContext* colCtx, f32 arg2, f32 arg3, f32* arg4, UNK_PTR arg5);
f32 Math_Sins (s16 angle);
f32 Math_Coss (s16 angle);
s16 Math_Vec3f_Yaw (Vec3f * a, Vec3f * b);
s16 Math_Vec3f_Pitch (Vec3f * a, Vec3f * b);
f32 Math_Vec3f_DistXYZ (Vec3f * a, Vec3f * b);
f32 Math_Vec3f_DistXZ(Vec3f * a, Vec3f * b);
void Math_Vec3f_Copy(Vec3f* dest, Vec3f* src);
s16 atan2s(f32 x, f32 y);
void func_800D15D8(UNK_PTR, Gfx*, Hilite*, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32,
                   s32, s32);

s32 Overlay_Load(u32 vRomStart, u32 vRomEnd, void* vRamStart, void* vRamEnd, void* allocatedVRamAddress);
void* Game_Alloc(GameState* gameState);
#endif